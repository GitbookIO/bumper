#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var semver = require('semver');
var program = require('commander');
var inquirer = require('inquirer');

var INDENTATION = 2;

var LEVELS = ['major','minor','patch','premajor','preminor','prepatch','prerelease'];

/* Parse command line args */
program
    .usage('[options] <level> [prerelease-id]\n\n\t Where level is one of ' + LEVELS.join(', '))
    .version(require('../package').version)
    .option('-d, --dir <path>',
            'directory of the Node module (default \'./\')')
    .parse(process.argv);


/* Process args */
var projectPath = path.join(process.cwd(), program.dir || '.')
var packagePath = path.join(projectPath, './package.json');

// Version increment level
var level = (program.args[0] || 'patch').toLowerCase();
if (!validLevel(level)) {
    console.error('Invalid version level identifier "' + level + '" must be one of ' + LEVELS.join(', '));
    process.exit(1);
}

// Prerelease identifier, such as 'alpha', 'beta'
var preid = (program.args[1] || 'alpha').toLowerCase();


/* Load package.json */
var package;
try {
    package = require(packagePath);
} catch (e) {
    console.error('Could not load package.json at', projectPath);
    process.exit(1);
}


/* Bump the version */
var newVersion = semver.inc(package.version, level, preid)


/* Ask confirmation */
var prompts = []
if (!program.force) {
    prompts.push({
        name: 'confirm',
        type: 'confirm',
        message: 'Bump from ' + package.version + ' to ' + newVersion + ' ?'
    });
}

inquirer.prompt(prompts).then(function (answers) {
    if (!answers.confirm) {
        process.exit(1);
    }
    console.log(newVersion)
})


/* Write it back */
package.version = newVersion;
fs.writeFileSync(packagePath, JSON.stringify(package, null, INDENTATION) + '\n');

/**
 * Test validity of a version level
 */
function validLevel(level) {
    var re = new RegExp('^(' + LEVELS.join('|') + ')$');
    return re.test(level);
}

