#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var Promise = require('q');
var semver = require('semver');
var program = require('commander');
var inquirer = require('inquirer');
var exec = require('child-process-promise').exec;

var INDENTATION = 2;

var LEVELS = ['major','minor','patch','premajor','preminor','prepatch','prerelease'];

/* Parse command line args */
program
    .usage('[options] <level> [prerelease-id]\n\n\t Where level is one of ' + LEVELS.join(', '))
    .version(require('../package').version)
    .option('-d, --dir <path>',
            'directory of the Node module (default \'./\')')
    .option('-f, --force',
            'do not ask for confirmation')
    .option('-c, --commit',
            'make a commit and tag with version')
    .option('-p, --push',
            'push commit and tag to remote')
    .parse(process.argv);


/* Process args */
var projectPath = path.join(process.cwd(), program.dir || '.')
var packagePath = path.join(projectPath, './package.json');

// Version increment level
var level = (program.args[0] || 'patch').toLowerCase();
if (!validLevel(level)) {
    console.error('Invalid version level identifier "' + level + '" must be one of ' + LEVELS.join(', '));
    process.exit(1);
}

// Prerelease identifier, such as 'alpha', 'beta'
var preid = (program.args[1] || 'alpha').toLowerCase();


/* Load package.json */
var package;
try {
    package = require(packagePath);
} catch (e) {
    console.error('Could not load package.json at', projectPath);
    process.exit(1);
}


/* Bump the version */
var newVersion = semver.inc(package.version, level, preid)


/* Ask confirmation */
return Promise()
.then(function confirm() {
    if (!program.force) {
        return inquirer.prompt({
            name: 'confirm',
            type: 'confirm',
            message: 'Bump from ' + package.version + ' to ' + newVersion + ' ?'
        }).then(function (answers) {
            if (!answers.confirm) {
                process.exit(1);
            }
        });
    }
}).then(function bump() {
    // bumpPkg(packagePath, package, newVersion);
}).then(function commit() {
    if (program.commit) {
        return commitTag(packagePath, program, newVersion);
    }
}).then(function push() {
    if (program.push) {
        return exec('git push')
        .then(function () {
            return exec('git push --tags');
        });
    }
});



/**
 * Test validity of a version level
 */
function validLevel(level) {
    var re = new RegExp('^(' + LEVELS.join('|') + ')$');
    return re.test(level);
}

function bumpPkg(packagePath, package, version) {
    package.version = version;
    fs.writeFileSync(packagePath, JSON.stringify(package, null, INDENTATION) + '\n');
}

function commitTag(packagePath, program, version) {
    return exec('git add ' + packagePath)
    .then(function () {
        return exec('git commit -m "Bump version to ' + version + ' :rocket:');
    })
    .then(function () {
        return exec('git tag ' + version);
    });
}
